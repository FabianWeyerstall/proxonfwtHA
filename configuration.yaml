template:

  - sensor:
    - name: "Heizungsverbrauch_total"
      unit_of_measurement: kWh
      state: >-
        {{ (states('sensor.shelly_3em_pro_heizung_ohne_wp_total_active_energy')|float +
        states('sensor.eg_hwr_warmepumpe_energy')|float )|round(0) }}
    - name: 'Heizung Filter Tage'
      state: >
        {% set filter_raw = states('sensor.nutzzeit_fwt_geratefilter') | float %}
        {{ (((filter_raw) *2) /24) | round(0) }}
      unit_of_measurement: "days"
    - name: "Heizung Filter Resttage"
      state: >
        {% set filter_tage = states('sensor.heizung_filter_tage') | float %}
        {{ (180 - filter_tage) | round(0) }}
      unit_of_measurement: "days"
      
    - name: "PTC_Status_Map"
      state: "{{ states('sensor.PTC_Status') }}"
      attributes:
        ptc_status_00: "{% if states('sensor.PTC_Status') | int | bitwise_and(1) %}on{% else %}off{% endif %}"
        ptc_status_01: "{% if states('sensor.PTC_Status') | int | bitwise_and(2) %}on{% else %}off{% endif %}"
        ptc_status_02: "{% if states('sensor.PTC_Status') | int | bitwise_and(4) %}on{% else %}off{% endif %}"
        ptc_status_03: "{% if states('sensor.PTC_Status') | int | bitwise_and(8) %}on{% else %}off{% endif %}"
        ptc_status_04: "{% if states('sensor.PTC_Status') | int | bitwise_and(16) %}on{% else %}off{% endif %}"
        ptc_status_05: "{% if states('sensor.PTC_Status') | int | bitwise_and(32) %}on{% else %}off{% endif %}"

        
      
  # You may already have other templates here.  If so, just
  # append the following block of configuration.
  - binary_sensor:
      - name: "Anwesenheit im Bett"
        # This represents the unique ID of your bed sensor.
        unique_id: binary_sensor.anwesenheit_im_bett
        # We assume the entity name of your door sensor is
        # binary_sensor.lumi_lumi_sensor_magnet_aq2_opening in this example.
        # Change to suit your circumstance.
        state: >-
          {{ not is_state('binary_sensor.lumi_lumi_sensor_magnet_aq2_opening', 'on') }}
        # Debouncing for 15 seconds.
        delay_on: "0:00:15"
        delay_off: "0:00:15"
        # This is an occupancy class sensor.
        device_class: occupancy
        # The sensor must not show as available when the reference sensor isn't.
        availability: >-
          {{ states('binary_sensor.lumi_lumi_sensor_magnet_aq2_opening') not in ['unavailable', 'unknown'] }}
        # This template changes the icon depending if you're in bed or not.
        # Note that the icon template refers to this sensor's unique ID,
        # rather than to the reference sensor's ID.  This is because we
        # want to change the icon when the value of this sensor changes,
        # not the un-debounced value of the reference sensor.
        icon: >-
          {% if is_state('binary_sensor.anwesenheit_im_bett_2', 'normal') -%}
          mdi:bed-empty
          {% else -%}
          mdi:bed
          {% endif -%}
          
      - name: PTC_Wohnzimmer
        state: "{% if states('sensor.PTC_Status') | int | bitwise_and(1) %}on{% else %}off{% endif %}"
        unique_id: PTC_574_0

      - name: PTC_Flur
        state: "{% if states('sensor.PTC_Status') | int | bitwise_and(2) %}on{% else %}off{% endif %}"
        unique_id: PTC_574_1

      - name: PTC_Buero
        state: "{% if states('sensor.PTC_Status') | int | bitwise_and(4) %}on{% else %}off{% endif %}"
        unique_id: PTC_574_2

      - name: PTC_Schlafzimmer
        state: "{% if states('sensor.PTC_Status') | int | bitwise_and(8) %}on{% else %}off{% endif %}"
        unique_id: PTC_574_3

      - name: PTC_Henry
        state: "{% if states('sensor.PTC_Status') | int | bitwise_and(16) %}on{% else %}off{% endif %}"
        unique_id: PTC_574_4

      - name: PTC_Gaestezimmer
        state: "{% if states('sensor.PTC_Status') | int | bitwise_and(32) %}on{% else %}off{% endif %}"
        unique_id: PTC_574_5
